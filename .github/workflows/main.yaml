name: Main

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  id-token: write
  contents: write
  packages: write
  pull-requests: write

env:
  HELM_DOCS_VERSION: 1.14.2

jobs:
  get-charts:
    name: Get charts
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.check-folders.outputs.charts }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Get charts
        id: check-folders
        run: |
          wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/local/bin/yq
          chmod +x /usr/local/bin/yq

          folders=$(ls charts | jq -R -s -c 'split("\n")[:-1]')
          echo "charts=$folders" >> $GITHUB_OUTPUT

  update-charts:
    needs: get-charts
    strategy:
      max-parallel: 1
      fail-fast: false
      matrix:
        chart: ${{ fromJson(needs.get-charts.outputs.matrix) }}
    name: Update (${{ matrix.chart }})
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Check for changed files
        uses: dorny/paths-filter@v3
        id: changed-files
        with:
          filters: |
            chart:
              - 'charts/${{ matrix.chart }}/**'
      - name: Set up kubectl
        if: steps.changed-files.outputs.chart == 'true'
        uses: azure/setup-kubectl@v4
      - name: Set up Helm
        uses: azure/setup-helm@v4
        if: steps.changed-files.outputs.chart == 'true'
      - name: Install Helm unittest plugin
        if: steps.changed-files.outputs.chart == 'true'
        run:
          helm plugin install https://github.com/helm-unittest/helm-unittest.git
      - name: Run unit tests
        if: steps.changed-files.outputs.chart == 'true'
        working-directory: charts/${{ matrix.chart }}
        run: |
          helm dependency update
          helm unittest .
      - name: Render chart
        if: steps.changed-files.outputs.chart == 'true'
        working-directory: charts/${{ matrix.chart }}
        run: |
          helm template . --values tests/values/required-values.yaml --output-dir /tmp/${{ matrix.chart }}
      - name: Lint chart
        if: steps.changed-files.outputs.chart == 'true'
        uses: stackrox/kube-linter-action@v1
        with:
          directory: /tmp/${{ matrix.chart }}
          config: charts/${{ matrix.chart }}/.kube-linter.yaml
      - name: Create release draft
        if: steps.changed-files.outputs.chart == 'true'
        uses: release-drafter/release-drafter@v6
        id: draft-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          config-name: ${{ matrix.chart }}-release-drafter.yaml
          publish: false
      - name: Generate a token for Brainz-Bot
        id: generate-token
        if: steps.changed-files.outputs.chart == 'true'
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ secrets.BRAINZ_BOT_ID }}
          private-key: ${{ secrets.BRAINZ_BOT_PRIVATE_KEY }}
      - name: Update chart version
        id: update-chart-version
        if: steps.changed-files.outputs.chart == 'true'
        working-directory: charts/${{ matrix.chart }}
        run: |
          # Update the chart version in Chart.yaml
          wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/local/bin/yq
          chmod +x /usr/local/bin/yq
          yq e '.version = "${{ steps.draft-release.outputs.resolved_version }}"' -i Chart.yaml

          # Update the docs
          wget -qO- https://github.com/norwoodj/helm-docs/releases/download/v${{ env.HELM_DOCS_VERSION }}/helm-docs_${{ env.HELM_DOCS_VERSION }}_Linux_x86_64.tar.gz | tar xvz
          sudo mv helm-docs /usr/local/sbin
          helm-docs

          cd ../../

          # Commit the changes
          FILES_CHANGED="charts/${{ matrix.chart }}/README.md charts/${{ matrix.chart }}/Chart.yaml"
          for file in $FILES_CHANGED; do
            CONTENT=$(base64 -w 0 $file)
            FILENAME=$(basename $file)
            SHA=$(curl -s -H "Authorization: token ${{ steps.generate-token.outputs.token }}" https://api.github.com/repos/${{ github.repository }}/contents/$file?ref=${{ github.ref	}} | jq -r .sha)
            if [ "$SHA" == "null" ]; then
              SHA=""
            fi
            curl -s -X PUT -H "Authorization: token ${{ steps.generate-token.outputs.token }}" \
              -d "{\"message\":\"chore: update $FILENAME [skip ci]\", \"content\":\"$CONTENT\", \"branch\":\"${{ github.ref	}}\", \"sha\":\"$SHA\"}" \
              https://api.github.com/repos/${{ github.repository }}/contents/$file
          done

          # Get the latest commit from main branch
          LATEST_COMMIT=$(curl -s -H "Authorization: token ${{ steps.generate-token.outputs.token }}" \
            "https://api.github.com/repos/${{ github.repository }}/commits/main" | jq -r .sha)
          echo "latest_commit=$LATEST_COMMIT" >> $GITHUB_OUTPUT
      - name: Publish chart
        if: steps.changed-files.outputs.chart == 'true'
        working-directory: charts/${{ matrix.chart }}
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          helm package . -d ./../..
          cd ../../
          curl -L -o index.yaml https://raw.githubusercontent.com/${{ github.repository }}/gh-pages/index.yaml
          helm repo index . --merge index.yaml --url "https://github.com/${{ github.repository }}/releases/download/${{ steps.draft-release.outputs.tag_name }}"
          chart=$(ls | grep ${{ matrix.chart }})
          gh release upload ${{ steps.draft-release.outputs.tag_name }} $chart
      - name: Update Github Pages
        if: steps.changed-files.outputs.chart == 'true'
        shell: bash
        run: |
          cp index.yaml /tmp/index.yaml
          git reset --hard
          git fetch origin gh-pages
          git checkout gh-pages
          cp /tmp/index.yaml index.yaml

          # Commit the changes
          FILE="index.yaml"
          CONTENT=$(base64 -w 0 $FILE)
          FILENAME=$(basename $FILE)
          SHA=$(curl -s -H "Authorization: token ${{ steps.generate-token.outputs.token }}" https://api.github.com/repos/${{ github.repository }}/contents/$FILE?ref=gh-pages | jq -r .sha)
          if [ "$SHA" == "null" ]; then
            SHA=""
          fi
          curl -s -X PUT -H "Authorization: token ${{ steps.generate-token.outputs.token }}" \
            -d "{\"message\":\"chore: update $FILENAME [skip ci]\", \"content\":\"$CONTENT\", \"branch\":\"gh-pages\", \"sha\":\"$SHA\"}" \
            https://api.github.com/repos/${{ github.repository }}/contents/$FILE
      - name: Finalize release
        if: steps.changed-files.outputs.chart == 'true'
        uses: release-drafter/release-drafter@v6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          config-name: ${{ matrix.chart }}-release-drafter.yaml
          publish: true
          commitish: ${{ steps.update-chart-version.outputs.latest_commit }}

  update-library:
    needs: update-charts
    name: Update library
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: main
      - name: Generate a token for Brainz-Bot
        id: generate-token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ secrets.BRAINZ_BOT_ID }}
          private-key: ${{ secrets.BRAINZ_BOT_PRIVATE_KEY }}
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24"
          cache-dependency-path: |
            lib-gen/go.sum
      - name: Run lib-gen
        run: |
          cd lib-gen
          make run
      - name: Commit changes
        run: |
          # Commit the changes
          FILE="library.yaml"
          CONTENT=$(base64 -w 0 $FILE)
          FILENAME=$(basename $FILE)
          SHA=$(curl -s -H "Authorization: token ${{ steps.generate-token.outputs.token }}" https://api.github.com/repos/${{ github.repository }}/contents/$FILE?ref=main | jq -r .sha)
          if [ "$SHA" == "null" ]; then
            SHA=""
          fi
          curl -s -X PUT -H "Authorization: token ${{ steps.generate-token.outputs.token }}" \
            -d "{\"message\":\"chore: update $FILENAME [skip ci]\", \"content\":\"$CONTENT\", \"branch\":\"main\", \"sha\":\"$SHA\"}" \
            https://api.github.com/repos/${{ github.repository }}/contents/$FILE
